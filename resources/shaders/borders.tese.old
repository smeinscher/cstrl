#version 460 core

layout(quads, fractional_even_spacing) in;

uniform mat4 view;
uniform mat4 projection;

vec3 bezier(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t)
{
    float u = 1.0 - t;
    return u * u * u * p0 +
        3.0 * u * u * t * p1 +
        3.0 * u * t * t * p2 +
        t * t * t * p3;
}

vec3 bezierSurface(vec2 uv)
{
    float u = uv.x;
    float v = uv.y;

    float Bu[4] = {
        (1.0 - u) * (1.0 - u) * (1.0 - u),
        3.0 * u * (1.0 - u) * (1.0 - u),
        3.0 * u * u * (1.0 - u),
        u * u * u
    };

    float Bv[4] = {
        (1.0 - v) * (1.0 - v) * (1.0 - v),
        3.0 * v * (1.0 - v) * (1.0 - v),
        3.0 * v * v * (1.0 - v),
        v * v * v
    };

    vec3 position = vec3(0.0);

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            position += vControlPoints[i * 4 + j] * Bu[i] * Bv[j];
        }
    }

    return position;
}

void main()
{
    float curve_factor = 0.5f;

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec3 curve0 = bezier(gl_in[0].gl_Position.xyz, gl_in[1].gl_Position.xyz, gl_in[2].gl_Position.xyz, gl_in[3].gl_Position.xyz, u);
    vec3 curve1 = bezier(gl_in[4].gl_Position.xyz, gl_in[5].gl_Position.xyz, gl_in[6].gl_Position.xyz, gl_in[7].gl_Position.xyz, u);
    vec3 curve2 = bezier(gl_in[8].gl_Position.xyz, gl_in[9].gl_Position.xyz, gl_in[10].gl_Position.xyz, gl_in[11].gl_Position.xyz, u);
    vec3 curve3 = bezier(gl_in[12].gl_Position.xyz, gl_in[13].gl_Position.xyz, gl_in[14].gl_Position.xyz, gl_in[15].gl_Position.xyz, u);

    vec3 position = bezier(curve0, curve1, curve2, curve3, v);

    gl_Position = projection * view * vec4(position, 1.0);
}
